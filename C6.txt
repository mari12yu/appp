package com.example.tm7_spa_mebt

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.material.icons.filled.Delete
import androidx.compose.material.icons.filled.Edit
import androidx.compose.material.icons.filled.Home
import androidx.compose.material.icons.filled.Person
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.BottomAppBar
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.DropdownMenu
import androidx.compose.material3.DropdownMenuItem
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.FloatingActionButton
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.RadioButton
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.TextFieldValue
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.text.style.TextOverflow
import com.example.tm7_spa_mebt.ui.theme.TM7_Spa_MEBTTheme

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            TM7_Spa_MEBTTheme {
                AppBaqueSpa()
            }
        }
    }
}

// Definimos un enum para las diferentes pantallas
enum class Screen {
    MAIN,
    EMPRESA,
    CONTACTENOS,
    QUIENES_SOMOS,
    SERVICIOS,
    REGISTRO_CLIENTES,
    GESTIONAR_SERVICIOS,
    MANTENIMIENTO_SERVICIOS,
    LISTA_SERVICIOS
}

// Color principal para la aplicación (tono rosa)
val baquePink = Color(0xFFE687B7)
val baqueBackground = Color(0xFFFCF0F7)
val baqueButtonColor = Color(0xFFE687B7)

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AppBaqueSpa() {
    // Estado para manejar la navegación entre pantallas
    var currentScreen by remember { mutableStateOf(Screen.MAIN) }
    var showMenu by remember { mutableStateOf(false) }

    // Estado para manejar operaciones de servicios
    var tipoOperacionServicio by remember { mutableStateOf("Registrar") }
    var servicioSeleccionado by remember { mutableStateOf(Servicio()) }

    // Lista de servicios (simulación de base de datos)
    var listaServicios by remember { mutableStateOf(
        listOf(
            Servicio("S001", "Masaje Relajante", "35.00", "Masaje completo para relajar músculos"),
            Servicio("S002", "Limpieza Facial", "28.00", "Limpieza profunda con productos naturales"),
            Servicio("S003", "Manicure Spa", "15.00", "Tratamiento completo para manos"),
            Servicio("S004", "Pedicure Deluxe", "22.00", "Pedicure con tratamiento de spa")
        )
    ) }

    // Para mostrar diálogos de confirmación
    var mostrarDialogoEliminar by remember { mutableStateOf(false) }
    var servicioAEliminar by remember { mutableStateOf<Servicio?>(null) }

    Scaffold(
        topBar = {
            TopAppBar(
                title = {
                    Text(
                        text = "BAQUE SPA",
                        color = Color.White,
                        fontSize = 24.sp,
                        fontWeight = FontWeight.Bold,
                        textAlign = TextAlign.Center,
                        modifier = Modifier.fillMaxWidth()
                    )
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = baquePink
                )
            )
        },
        bottomBar = {
            BottomAppBar(
                containerColor = baquePink,
                actions = {
                    IconButton(onClick = { currentScreen = Screen.MAIN }) {
                        Icon(
                            imageVector = Icons.Filled.Home,
                            contentDescription = "Home",
                            tint = Color.White
                        )
                    }
                    IconButton(onClick = { currentScreen = Screen.REGISTRO_CLIENTES }) {
                        Icon(
                            imageVector = Icons.Filled.Person,
                            contentDescription = "Registro Clientes",
                            tint = Color.White
                        )
                    }
                },
                floatingActionButton = {
                    Box {
                        FloatingActionButton(
                            onClick = { showMenu = !showMenu },
                            containerColor = Color.White,
                            contentColor = baquePink,
                            shape = CircleShape
                        ) {
                            Icon(
                                imageVector = Icons.Filled.Add,
                                contentDescription = "Menu Principal"
                            )
                        }
                        DropdownMenu(
                            expanded = showMenu,
                            onDismissRequest = { showMenu = false }
                        ) {
                            DropdownMenuItem(
                                text = { Text("Inicio") },
                                onClick = {
                                    currentScreen = Screen.MAIN
                                    showMenu = false
                                }
                            )
                            DropdownMenuItem(
                                text = { Text("Empresa") },
                                onClick = {
                                    currentScreen = Screen.EMPRESA
                                    showMenu = false
                                }
                            )
                            DropdownMenuItem(
                                text = { Text("Servicios") },
                                onClick = {
                                    currentScreen = Screen.SERVICIOS
                                    showMenu = false
                                }
                            )
                            DropdownMenuItem(
                                text = { Text("Gestionar Servicios") },
                                onClick = {
                                    currentScreen = Screen.GESTIONAR_SERVICIOS
                                    showMenu = false
                                }
                            )
                            DropdownMenuItem(
                                text = { Text("Registrar Clientes") },
                                onClick = {
                                    currentScreen = Screen.REGISTRO_CLIENTES
                                    showMenu = false
                                }
                            )
                        }
                    }
                }
            )
        },
        containerColor = baqueBackground
    ) { innerPadding ->
        Box(
            modifier = Modifier
                .fillMaxSize()
                .padding(innerPadding)
        ) {
            // Mostrar la pantalla apropiada según el estado actual
            when (currentScreen) {
                Screen.MAIN -> MainScreen(
                    onEmpresaClick = { currentScreen = Screen.EMPRESA },
                    onServiciosClick = { currentScreen = Screen.SERVICIOS },
                    onGestionarServiciosClick = { currentScreen = Screen.GESTIONAR_SERVICIOS }
                )
                Screen.EMPRESA -> EmpresaScreen(
                    onBackClick = { currentScreen = Screen.MAIN },
                    onContactenosClick = { currentScreen = Screen.CONTACTENOS },
                    onQuienesSomosClick = { currentScreen = Screen.QUIENES_SOMOS }
                )
                Screen.CONTACTENOS -> ContactenosScreen(onBackClick = { currentScreen = Screen.EMPRESA })
                Screen.QUIENES_SOMOS -> QuienesSomosScreen(onBackClick = { currentScreen = Screen.EMPRESA })
                Screen.SERVICIOS -> ServiciosScreen(
                    onBackClick = { currentScreen = Screen.MAIN }
                )
                Screen.REGISTRO_CLIENTES -> RegistroClientesScreen(onBackClick = { currentScreen = Screen.MAIN })

                // Nuevas pantallas de gestión de servicios
                Screen.GESTIONAR_SERVICIOS -> GestionarServiciosScreen(
                    onRegistrarClick = {
                        tipoOperacionServicio = "Registrar"
                        servicioSeleccionado = Servicio()
                        currentScreen = Screen.MANTENIMIENTO_SERVICIOS
                    },
                    onModificarClick = {
                        tipoOperacionServicio = "Modificar"
                        servicioSeleccionado = Servicio()
                        currentScreen = Screen.MANTENIMIENTO_SERVICIOS
                    },
                    onConsultarClick = {
                        tipoOperacionServicio = "Consultar"
                        servicioSeleccionado = Servicio()
                        currentScreen = Screen.MANTENIMIENTO_SERVICIOS
                    },
                    onEliminarClick = {
                        tipoOperacionServicio = "Eliminar"
                        servicioSeleccionado = Servicio()
                        currentScreen = Screen.MANTENIMIENTO_SERVICIOS
                    },
                    onListaServiciosClick = {
                        currentScreen = Screen.LISTA_SERVICIOS
                    },
                    onBackClick = { currentScreen = Screen.MAIN }
                )

                Screen.MANTENIMIENTO_SERVICIOS -> MantenimientoServiciosScreen(
                    tipoOperacion = tipoOperacionServicio,
                    servicioInicial = servicioSeleccionado,
                    listaServicios = listaServicios,
                    onGuardarClick = { servicio ->
                        when (tipoOperacionServicio) {
                            "Registrar" -> {
                                // Verificar que el código no exista ya
                                if (listaServicios.none { it.codigo == servicio.codigo }) {
                                    listaServicios = listaServicios + servicio
                                }
                            }
                            "Modificar" -> {
                                listaServicios = listaServicios.map {
                                    if (it.codigo == servicio.codigo) servicio else it
                                }
                            }
                        }
                        currentScreen = Screen.GESTIONAR_SERVICIOS
                    },
                    onEliminarClick = { servicio ->
                        listaServicios = listaServicios.filter { it.codigo != servicio.codigo }
                        currentScreen = Screen.GESTIONAR_SERVICIOS
                    },
                    onBackClick = { currentScreen = Screen.GESTIONAR_SERVICIOS }
                )

                Screen.LISTA_SERVICIOS -> ListaServiciosScreen(
                    servicios = listaServicios,
                    onEditarClick = { servicio ->
                        tipoOperacionServicio = "Modificar"
                        servicioSeleccionado = servicio
                        currentScreen = Screen.MANTENIMIENTO_SERVICIOS
                    },
                    onEliminarClick = { servicio ->
                        servicioAEliminar = servicio
                        mostrarDialogoEliminar = true
                    },
                    onBackClick = { currentScreen = Screen.GESTIONAR_SERVICIOS }
                )
            }

            // Diálogo de confirmación para eliminar
            if (mostrarDialogoEliminar && servicioAEliminar != null) {
                AlertDialog(
                    onDismissRequest = { mostrarDialogoEliminar = false },
                    title = { Text("Confirmar eliminación") },
                    text = { Text("¿Está seguro que desea eliminar el servicio ${servicioAEliminar?.nombre}?") },
                    confirmButton = {
                        Button(
                            onClick = {
                                listaServicios = listaServicios.filter { it.codigo != servicioAEliminar?.codigo }
                                mostrarDialogoEliminar = false
                                servicioAEliminar = null
                            },
                            colors = ButtonDefaults.buttonColors(containerColor = Color.Red)
                        ) {
                            Text("Eliminar", color = Color.White)
                        }
                    },
                    dismissButton = {
                        Button(
                            onClick = {
                                mostrarDialogoEliminar = false
                                servicioAEliminar = null
                            },
                            colors = ButtonDefaults.buttonColors(containerColor = baqueButtonColor)
                        ) {
                            Text("Cancelar")
                        }
                    }
                )
            }

            // Área para mostrar los fragmentos (nombres de pantallas)
            Box(
                modifier = Modifier
                    .align(Alignment.BottomStart)
                    .padding(8.dp)
            ) {
                when (currentScreen) {
                    Screen.MAIN -> Text("MainActivity", fontSize = 12.sp)
                    Screen.EMPRESA -> Text("frmEmpresa", fontSize = 12.sp)
                    Screen.CONTACTENOS -> Text("fragmento_contactenos", fontSize = 12.sp)
                    Screen.QUIENES_SOMOS -> Text("fragmento_quienes_somos", fontSize = 12.sp)
                    Screen.SERVICIOS -> Text("Presentacion_servicios", fontSize = 12.sp)
                    Screen.REGISTRO_CLIENTES -> Text("registro_clientes", fontSize = 12.sp)
                    Screen.GESTIONAR_SERVICIOS -> Text("gestionar_servicios", fontSize = 12.sp)
                    Screen.MANTENIMIENTO_SERVICIOS -> Text("mantenimiento_servicios", fontSize = 12.sp)
                    Screen.LISTA_SERVICIOS -> Text("lista_servicios", fontSize = 12.sp)
                }
            }
        }
    }
}
//Registro de Clientes
@Composable
fun RegistroClientesScreen(onBackClick: () -> Unit) {
    var cedulaState by remember { mutableStateOf(TextFieldValue("")) }
    var nombreState by remember { mutableStateOf(TextFieldValue("")) }
    var direccionState by remember { mutableStateOf(TextFieldValue("")) }
    var telefonoState by remember { mutableStateOf(TextFieldValue("")) }
    var ciudadState by remember { mutableStateOf(TextFieldValue("")) }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        Text(
            text = "REGISTRO DE CLIENTES",
            fontSize = 20.sp,
            fontWeight = FontWeight.Bold,
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 16.dp),
            textAlign = TextAlign.Center
        )

        // Formulario de registro de clientes
        Text(
            text = "Cédula:",
            fontSize = 14.sp,
            modifier = Modifier.padding(vertical = 4.dp)
        )
        OutlinedTextField(
            value = cedulaState,
            onValueChange = { cedulaState = it },
            modifier = Modifier.fillMaxWidth(),
            singleLine = true,
            textStyle = TextStyle(color = Color.Black)
        )

        Text(
            text = "Nombre completo:",
            fontSize = 14.sp,
            modifier = Modifier.padding(vertical = 4.dp)
        )
        OutlinedTextField(
            value = nombreState,
            onValueChange = { nombreState = it },
            modifier = Modifier.fillMaxWidth(),
            singleLine = true,
            textStyle = TextStyle(color = Color.Black)
        )

        Text(
            text = "Dirección:",
            fontSize = 14.sp,
            modifier = Modifier.padding(vertical = 4.dp)
        )
        OutlinedTextField(
            value = direccionState,
            onValueChange = { direccionState = it },
            modifier = Modifier.fillMaxWidth(),
            singleLine = true,
            textStyle = TextStyle(color = Color.Black)
        )

        Text(
            text = "Teléfono:",
            fontSize = 14.sp,
            modifier = Modifier.padding(vertical = 4.dp)
        )
        OutlinedTextField(
            value = telefonoState,
            onValueChange = { telefonoState = it },
            modifier = Modifier.fillMaxWidth(),
            singleLine = true,
            textStyle = TextStyle(color = Color.Black)
        )

        Text(
            text = "Ciudad:",
            fontSize = 14.sp,
            modifier = Modifier.padding(vertical = 4.dp)
        )
        OutlinedTextField(
            value = ciudadState,
            onValueChange = { ciudadState = it },
            modifier = Modifier.fillMaxWidth(),
            singleLine = true,
            textStyle = TextStyle(color = Color.Black)
        )

        Spacer(modifier = Modifier.weight(1f))

        // Botones de acción
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 16.dp),
            horizontalArrangement = Arrangement.Center,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Button(
                onClick = { /* Guardado de datos */ },
                colors = ButtonDefaults.buttonColors(containerColor = baqueButtonColor),
                modifier = Modifier.padding(end = 8.dp)
            ) {
                Text("Registrar")
            }

            Button(
                onClick = {
                    // Limpiar formulario
                    cedulaState = TextFieldValue("")
                    nombreState = TextFieldValue("")
                    direccionState = TextFieldValue("")
                    telefonoState = TextFieldValue("")
                    ciudadState = TextFieldValue("")
                },
                colors = ButtonDefaults.buttonColors(containerColor = baqueButtonColor),
                modifier = Modifier.padding(horizontal = 8.dp)
            ) {
                Text("Limpiar")
            }

            Button(
                onClick = onBackClick,
                colors = ButtonDefaults.buttonColors(containerColor = baqueButtonColor),
                modifier = Modifier.padding(start = 8.dp)
            ) {
                Text("Volver")
            }
        }
    }
}

// Main
@Composable
fun MainScreen(
    onEmpresaClick: () -> Unit,
    onServiciosClick: () -> Unit,
    onGestionarServiciosClick: () -> Unit = {}
) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        // Logo de Baque Spa (sin cambios)
        Image(
            painter = painterResource(id = R.drawable.logo),
            contentDescription = "Logo Baque Spa",
            modifier = Modifier
                .size(300.dp)
                .padding(vertical = 30.dp)
        )

        Spacer(modifier = Modifier.height(20.dp))

        // Opción Empresa
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .height(60.dp)
                .border(BorderStroke(1.dp, Color.Gray), shape = RoundedCornerShape(4.dp))
                .background(Color.White)
                .clickable { onEmpresaClick() }
                .padding(16.dp),
            contentAlignment = Alignment.Center
        ) {
            Text(
                text = "Empresa",
                fontSize = 18.sp,
                fontWeight = FontWeight.Medium
            )
        }

        Spacer(modifier = Modifier.height(16.dp))

        // Opción Servicios
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .height(60.dp)
                .border(BorderStroke(1.dp, Color.Gray), shape = RoundedCornerShape(4.dp))
                .background(Color.White)
                .clickable { onServiciosClick() }
                .padding(16.dp),
            contentAlignment = Alignment.Center
        ) {
            Text(
                text = "Servicios",
                fontSize = 18.sp,
                fontWeight = FontWeight.Medium
            )
        }

        Spacer(modifier = Modifier.height(16.dp))

        // Opción: Gestionar Servicios
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .height(60.dp)
                .border(BorderStroke(1.dp, Color.Gray), shape = RoundedCornerShape(4.dp))
                .background(Color.White)
                .clickable { onGestionarServiciosClick() }
                .padding(16.dp),
            contentAlignment = Alignment.Center
        ) {
            Text(
                text = "Gestionar Servicios",
                fontSize = 18.sp,
                fontWeight = FontWeight.Medium
            )
        }
    }
}

@Composable
fun ServiciosScreen(onBackClick: () -> Unit) {
    // Variable de estado para la barra de búsqueda
    var busqueda by remember { mutableStateOf(TextFieldValue("")) }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        Text(
            text = "CATEGORÍA DE SERVICIOS",
            fontSize = 18.sp,
            fontWeight = FontWeight.Bold,
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 16.dp),
            textAlign = TextAlign.Center
        )

        // Barra de búsqueda con estado
        OutlinedTextField(
            value = busqueda,
            onValueChange = { busqueda = it },
            placeholder = { Text("Buscar servicios") },
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 16.dp),
            singleLine = true,
            textStyle = TextStyle(color = Color.Black)
        )

        // Ajuste del espaciado entre las filas de los servicios
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 16.dp)
        ) {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                // Servicio 1: Masajes
                Column(
                    modifier = Modifier
                        .weight(1f)
                        .padding(end = 8.dp),
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    Image(
                        painter = painterResource(id = R.drawable.masajes),
                        contentDescription = "Masajes",
                        modifier = Modifier
                            .size(140.dp)
                            .padding(8.dp)
                    )
                    Text(
                        text = "Masajes",
                        fontSize = 14.sp,
                        fontWeight = FontWeight.Medium,
                        textAlign = TextAlign.Center
                    )
                }

                // Servicio 2: Faciales
                Column(
                    modifier = Modifier
                        .weight(1f)
                        .padding(start = 8.dp),
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    Image(
                        painter = painterResource(id = R.drawable.faciales),
                        contentDescription = "Faciales",
                        modifier = Modifier
                            .size(140.dp)
                            .padding(8.dp)
                    )
                    Text(
                        text = "Faciales",
                        fontSize = 14.sp,
                        fontWeight = FontWeight.Medium,
                        textAlign = TextAlign.Center
                    )
                }
            }

            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                // Servicio 3: Pedicure
                Column(
                    modifier = Modifier
                        .weight(1f)
                        .padding(end = 8.dp),
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    Image(
                        painter = painterResource(id = R.drawable.pedicure),
                        contentDescription = "Pedicura",
                        modifier = Modifier
                            .size(140.dp)
                            .padding(8.dp)
                    )
                    Text(
                        text = "Pedicure",
                        fontSize = 14.sp,
                        fontWeight = FontWeight.Medium,
                        textAlign = TextAlign.Center
                    )
                }

                // Servicio 4: Manicure
                Column(
                    modifier = Modifier
                        .weight(1f)
                        .padding(start = 8.dp),
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    Image(
                        painter = painterResource(id = R.drawable.manicure),
                        contentDescription = "Manicura",
                        modifier = Modifier
                            .size(140.dp)
                            .padding(8.dp)
                    )
                    Text(
                        text = "Manicure",
                        fontSize = 14.sp,
                        fontWeight = FontWeight.Medium,
                        textAlign = TextAlign.Center
                    )
                }
            }
        }

        Spacer(modifier = Modifier.weight(1f))

        // Botón para volver
        Button(
            onClick = onBackClick,
            modifier = Modifier
                .align(Alignment.CenterHorizontally)
                .padding(bottom = 16.dp), // Agregar padding para mejorar la visibilidad del botón
            colors = ButtonDefaults.buttonColors(containerColor = baqueButtonColor)
        ) {
            Text("Volver")
        }
    }
}


//Empresa
@Composable
fun EmpresaScreen(
    onBackClick: () -> Unit,
    onContactenosClick: () -> Unit,
    onQuienesSomosClick: () -> Unit
) {
    // Variables de estado para los campos de texto
    var servicio by remember { mutableStateOf(TextFieldValue("")) }
    var fecha by remember { mutableStateOf(TextFieldValue("")) }
    var hora by remember { mutableStateOf(TextFieldValue("")) }
    var descripcion by remember { mutableStateOf(TextFieldValue("")) }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        Text(
            text = "EMPRESA",
            fontSize = 20.sp,
            fontWeight = FontWeight.Bold,
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 16.dp),
            textAlign = TextAlign.Center
        )

        // Sección ¿Quiénes somos?
        OutlinedButton(
            onClick = { onQuienesSomosClick() },
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 4.dp),
            border = BorderStroke(1.dp, baquePink)
        ) {
            Text(
                text = "¿Quiénes somos?",
                fontSize = 16.sp,
                color = Color.Black
            )
        }

        // Sección Contáctenos
        OutlinedButton(
            onClick = { onContactenosClick() },
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 4.dp),
            border = BorderStroke(1.dp, baquePink)
        ) {
            Text(
                text = "Contáctenos",
                fontSize = 16.sp,
                color = Color.Black
            )
        }

        // Título de Formulario de Reserva
        Text(
            text = "FORMULARIO DE RESERVA",
            fontSize = 18.sp,
            fontWeight = FontWeight.Bold,
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 16.dp),
            textAlign = TextAlign.Center
        )

        //  Formulario de Reserva con estados
        Text(
            text = "Servicio",
            fontSize = 14.sp,
            modifier = Modifier.padding(vertical = 4.dp)
        )
        OutlinedTextField(
            value = servicio,
            onValueChange = { servicio = it },
            modifier = Modifier.fillMaxWidth(),
            textStyle = TextStyle(color = Color.Black)
        )

        Text(
            text = "Fecha",
            fontSize = 14.sp,
            modifier = Modifier.padding(vertical = 4.dp)
        )
        OutlinedTextField(
            value = fecha,
            onValueChange = { fecha = it },
            modifier = Modifier.fillMaxWidth(),
            textStyle = TextStyle(color = Color.Black)
        )

        Text(
            text = "Hora",
            fontSize = 14.sp,
            modifier = Modifier.padding(vertical = 4.dp)
        )
        OutlinedTextField(
            value = hora,
            onValueChange = { hora = it },
            modifier = Modifier.fillMaxWidth(),
            textStyle = TextStyle(color = Color.Black)
        )

        Text(
            text = "Descripción",
            fontSize = 14.sp,
            modifier = Modifier.padding(vertical = 4.dp)
        )
        OutlinedTextField(
            value = descripcion,
            onValueChange = { descripcion = it },
            modifier = Modifier.fillMaxWidth(),
            textStyle = TextStyle(color = Color.Black)
        )

        Spacer(modifier = Modifier.weight(1f))

        // Botones de acción
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 1.dp),
            horizontalArrangement = Arrangement.Center,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Button(
                onClick = { /* Guardado de datos */ },
                colors = ButtonDefaults.buttonColors(containerColor = baqueButtonColor),
                modifier = Modifier.padding(end = 8.dp)
            ) {
                Text("Grabar")
            }

            Button(
                onClick = onBackClick,
                colors = ButtonDefaults.buttonColors(containerColor = baqueButtonColor),
                modifier = Modifier.padding(start = 8.dp)
            ) {
                Text("Volver")
            }
        }
    }
}

// Contactenos
@Composable
fun ContactenosScreen(onBackClick: () -> Unit) {
    // Variables de estado para los campos de texto
    var nombres by remember { mutableStateOf(TextFieldValue("")) }
    var apellidos by remember { mutableStateOf(TextFieldValue("")) }
    var ciudad by remember { mutableStateOf(TextFieldValue("")) }
    var direccion by remember { mutableStateOf(TextFieldValue("")) }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        Text(
            text = "CONTÁCTENOS",
            fontSize = 20.sp,
            fontWeight = FontWeight.Bold,
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 16.dp),
            textAlign = TextAlign.Center
        )

        // CORRECCIÓN: Formulario de contacto con estados
        Text(
            text = "Nombres:",
            fontSize = 14.sp,
            modifier = Modifier.padding(vertical = 4.dp)
        )
        OutlinedTextField(
            value = nombres,
            onValueChange = { nombres = it },
            modifier = Modifier.fillMaxWidth(),
            textStyle = TextStyle(color = Color.Black)
        )

        Text(
            text = "Apellidos:",
            fontSize = 14.sp,
            modifier = Modifier.padding(vertical = 4.dp)
        )
        OutlinedTextField(
            value = apellidos,
            onValueChange = { apellidos = it },
            modifier = Modifier.fillMaxWidth(),
            textStyle = TextStyle(color = Color.Black)
        )

        Text(
            text = "Ciudad:",
            fontSize = 14.sp,
            modifier = Modifier.padding(vertical = 4.dp)
        )
        OutlinedTextField(
            value = ciudad,
            onValueChange = { ciudad = it },
            modifier = Modifier.fillMaxWidth(),
            textStyle = TextStyle(color = Color.Black)
        )

        Text(
            text = "Dirección:",
            fontSize = 14.sp,
            modifier = Modifier.padding(vertical = 4.dp)
        )
        OutlinedTextField(
            value = direccion,
            onValueChange = { direccion = it },
            modifier = Modifier.fillMaxWidth(),
            textStyle = TextStyle(color = Color.Black)
        )
        // Nacionalidad con botones de radio
        Text(
            text = "Nacionalidad:",
            fontSize = 14.sp,
            modifier = Modifier.padding(vertical = 8.dp)
        )
        Row(
            modifier = Modifier.fillMaxWidth(),
            verticalAlignment = Alignment.CenterVertically
        ) {
            var selectedOption by remember { mutableStateOf("ecuatoriano") }

            RadioButton(
                selected = selectedOption == "ecuatoriano",
                onClick = { selectedOption = "ecuatoriano" }
            )
            Text(
                text = "Ecuatoriano",
                modifier = Modifier.padding(start = 4.dp)
            )

            Spacer(modifier = Modifier.width(16.dp))

            RadioButton(
                selected = selectedOption == "extranjero",
                onClick = { selectedOption = "extranjero" }
            )
            Text(
                text = "Extranjero",
                modifier = Modifier.padding(start = 4.dp)
            )
        }

        Spacer(modifier = Modifier.weight(1f))

        // Botones de acción
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 16.dp),
            horizontalArrangement = Arrangement.Center,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Button(
                onClick = { /* Guardado de datos */ },
                colors = ButtonDefaults.buttonColors(containerColor = baqueButtonColor),
                modifier = Modifier.padding(end = 8.dp)
            ) {
                Text("Grabar")
            }

            Button(
                onClick = onBackClick,
                colors = ButtonDefaults.buttonColors(containerColor = baqueButtonColor),
                modifier = Modifier.padding(start = 8.dp)
            ) {
                Text("Volver")
            }
        }
    }
}

// ¿Quienes somos?

@Composable
fun QuienesSomosScreen(onBackClick: () -> Unit) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = "QUIENES SOMOS",
            fontSize = 20.sp,
            fontWeight = FontWeight.Bold,
            modifier = Modifier.padding(bottom = 16.dp)
        )

        // Logo de Baque Spa
        Image(
            painter = painterResource(id = R.drawable.logo),
            contentDescription = "Logo Baque Spa",
            modifier = Modifier
                .size(190.dp)
                .padding(vertical = 16.dp)
        )

        // Descripción de quiénes somos
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .border(BorderStroke(1.dp, Color.LightGray), shape = RoundedCornerShape(8.dp))
                .background(Color(0xFFF8F8F8))
                .padding(16.dp)
        ) {
            Text(
                text = "En Baque Spa nos dedicamos al bienestar y la relajación mediante servicios especializados en masajes y tratamientos personalizados. Nuestro equipo de profesionales emplea técnicas avanzadas para proporcionar una experiencia de equilibrio y renovación en un entorno de tranquilidad.",
                fontSize = 16.sp,
                textAlign = TextAlign.Center
            )
        }

        Spacer(modifier = Modifier.weight(1f))

        // Botón para volver
        Button(
            onClick = onBackClick,
            colors = ButtonDefaults.buttonColors(containerColor = baqueButtonColor),
            modifier = Modifier.padding(bottom =  50.dp)
        ) {
            Text("Volver")
        }
    }
}


// Clase para representar un servicio
data class Servicio(
    val codigo: String = "",
    val nombre: String = "",
    val precio: String = "",
    val descripcion: String? = ""
)

// Gestion de Servicios
@Composable
fun GestionarServiciosScreen(
    onRegistrarClick: () -> Unit,
    onModificarClick: () -> Unit,
    onConsultarClick: () -> Unit,
    onEliminarClick: () -> Unit,
    onListaServiciosClick: () -> Unit,
    onBackClick: () -> Unit
) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        Text(
            text = "GESTIONAR SERVICIOS",
            fontSize = 20.sp,
            fontWeight = FontWeight.Bold,
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 24.dp),
            textAlign = TextAlign.Center
        )

        // Botones de opciones para gestionar servicios
        OutlinedButton(
            onClick = onRegistrarClick,
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 8.dp),
            border = BorderStroke(1.dp, baquePink)
        ) {
            Text(
                text = "Registrar Servicio",
                fontSize = 16.sp,
                color = Color.Black,
                modifier = Modifier.padding(vertical = 8.dp)
            )
        }

        OutlinedButton(
            onClick = onModificarClick,
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 8.dp),
            border = BorderStroke(1.dp, baquePink)
        ) {
            Text(
                text = "Modificar Servicio",
                fontSize = 16.sp,
                color = Color.Black,
                modifier = Modifier.padding(vertical = 8.dp)
            )
        }

        OutlinedButton(
            onClick = onConsultarClick,
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 8.dp),
            border = BorderStroke(1.dp, baquePink)
        ) {
            Text(
                text = "Consultar Servicio",
                fontSize = 16.sp,
                color = Color.Black,
                modifier = Modifier.padding(vertical = 8.dp)
            )
        }

        OutlinedButton(
            onClick = onEliminarClick,
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 8.dp),
            border = BorderStroke(1.dp, baquePink)
        ) {
            Text(
                text = "Eliminar Servicio",
                fontSize = 16.sp,
                color = Color.Black,
                modifier = Modifier.padding(vertical = 8.dp)
            )
        }

        OutlinedButton(
            onClick = onListaServiciosClick,
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 8.dp),
            border = BorderStroke(1.dp, baquePink)
        ) {
            Text(
                text = "Consultar Lista de Servicios",
                fontSize = 16.sp,
                color = Color.Black,
                modifier = Modifier.padding(vertical = 8.dp)
            )
        }

        Spacer(modifier = Modifier.weight(1f))

        // Botón para volver
        Button(
            onClick = onBackClick,
            colors = ButtonDefaults.buttonColors(containerColor = baqueButtonColor),
            modifier = Modifier.align(Alignment.CenterHorizontally)
        ) {
            Text("Volver")
        }
    }
}
// Mantenimiento de Servicios
@Composable
fun MantenimientoServiciosScreen(
    tipoOperacion: String = "Registrar",
    servicioInicial: Servicio = Servicio(),
    listaServicios: List<Servicio> = emptyList(),
    onGuardarClick: (Servicio) -> Unit = {},
    onEliminarClick: (Servicio) -> Unit = {},
    onBackClick: () -> Unit
) {
    var codigo by remember { mutableStateOf(TextFieldValue(servicioInicial.codigo)) }
    var nombre by remember { mutableStateOf(TextFieldValue(servicioInicial.nombre)) }
    var precio by remember { mutableStateOf(TextFieldValue(servicioInicial.precio)) }
    var descripcion by remember { mutableStateOf(TextFieldValue(servicioInicial.descripcion ?: "")) }

    // Para buscar servicios
    var codigoConsulta by remember { mutableStateOf(TextFieldValue("")) }
    var servicioEncontrado by remember { mutableStateOf<Servicio?>(null) }
    var mensajeError by remember { mutableStateOf("") }

    // Estado para saber si ya se realizó una búsqueda
    var busquedaRealizada by remember { mutableStateOf(false) }

    // Determinar si los campos son editables según el tipo de operación
    val codigoEditable = tipoOperacion == "Registrar"
    val camposEditables = tipoOperacion == "Registrar" || tipoOperacion == "Modificar"

    // Función para buscar un servicio por código usando la lista real de servicios
    fun buscarServicioPorCodigo(codigoBusqueda: String): Servicio? {
        return listaServicios.find { it.codigo == codigoBusqueda }
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        Text(
            text = "MANTENIMIENTO DE SERVICIOS",
            fontSize = 20.sp,
            fontWeight = FontWeight.Bold,
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 8.dp),
            textAlign = TextAlign.Center
        )

        Text(
            text = "Operación: $tipoOperacion",
            fontSize = 16.sp,
            fontWeight = FontWeight.Medium,
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 16.dp),
            textAlign = TextAlign.Center
        )

        // Para Consultar, Modificar y Eliminar se necesita buscar primero el servicio
        if (tipoOperacion == "Consultar" || tipoOperacion == "Modificar" || tipoOperacion == "Eliminar") {
            // Campo para buscar por código
            Text(
                text = "Ingrese código a buscar:",
                fontSize = 14.sp,
                modifier = Modifier.padding(vertical = 4.dp)
            )

            Row(
                modifier = Modifier.fillMaxWidth(),
                verticalAlignment = Alignment.CenterVertically
            ) {
                OutlinedTextField(
                    value = codigoConsulta,
                    onValueChange = { codigoConsulta = it },
                    modifier = Modifier.weight(1f),
                    singleLine = true,
                    textStyle = TextStyle(color = Color.Black)
                )

                Spacer(modifier = Modifier.width(8.dp))

                Button(
                    onClick = {
                        val resultado = buscarServicioPorCodigo(codigoConsulta.text)
                        if (resultado != null) {
                            servicioEncontrado = resultado
                            codigo = TextFieldValue(resultado.codigo)
                            nombre = TextFieldValue(resultado.nombre)
                            precio = TextFieldValue(resultado.precio)
                            descripcion = TextFieldValue(resultado.descripcion ?: "")
                            mensajeError = ""
                        } else {
                            mensajeError = "Servicio no encontrado"
                            servicioEncontrado = null
                            codigo = TextFieldValue("")
                            nombre = TextFieldValue("")
                            precio = TextFieldValue("")
                            descripcion = TextFieldValue("")
                        }
                        busquedaRealizada = true
                    },
                    colors = ButtonDefaults.buttonColors(containerColor = baqueButtonColor)
                ) {
                    Text("Buscar")
                }
            }

            // Mostrar mensaje de error si no se encuentra
            if (mensajeError.isNotEmpty()) {
                Text(
                    text = mensajeError,
                    color = Color.Red,
                    fontSize = 14.sp,
                    modifier = Modifier.padding(top = 4.dp)
                )
            }

            Spacer(modifier = Modifier.height(16.dp))
        }

        // Mostramos los campos solo si:
        // - Es registro (siempre)
        // - Es consulta/modificación/eliminación Y se encontró un servicio o se realizó una búsqueda
        if (tipoOperacion == "Registrar" ||
            (busquedaRealizada && servicioEncontrado != null)) {

            Text(text = "Código:", fontSize = 14.sp, modifier = Modifier.padding(vertical = 4.dp))
            OutlinedTextField(
                value = codigo,
                onValueChange = { codigo = it },
                modifier = Modifier.fillMaxWidth(),
                singleLine = true,
                enabled = codigoEditable,
                textStyle = TextStyle(color = Color.Black)
            )

            Text(text = "Nombre:", fontSize = 14.sp, modifier = Modifier.padding(vertical = 4.dp))
            OutlinedTextField(
                value = nombre,
                onValueChange = { nombre = it },
                modifier = Modifier.fillMaxWidth(),
                singleLine = true,
                enabled = camposEditables,
                textStyle = TextStyle(color = Color.Black)
            )

            Text(text = "Precio:", fontSize = 14.sp, modifier = Modifier.padding(vertical = 4.dp))
            OutlinedTextField(
                value = precio,
                onValueChange = { precio = it },
                modifier = Modifier.fillMaxWidth(),
                singleLine = true,
                enabled = camposEditables,
                textStyle = TextStyle(color = Color.Black)
            )

            Text(text = "Descripción:", fontSize = 14.sp, modifier = Modifier.padding(vertical = 4.dp))
            OutlinedTextField(
                value = descripcion,
                onValueChange = { descripcion = it },
                modifier = Modifier.fillMaxWidth(),
                minLines = 3,
                singleLine = false,
                enabled = camposEditables,
                textStyle = TextStyle(color = Color.Black)
            )
        }

        Spacer(modifier = Modifier.weight(1f))

        // Botones de acción según el tipo de operación
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 16.dp),
            horizontalArrangement = Arrangement.Center,
            verticalAlignment = Alignment.CenterVertically
        ) {
            when (tipoOperacion) {
                "Registrar" -> {
                    Button(
                        onClick = {
                            val servicioNuevo = Servicio(
                                codigo = codigo.text,
                                nombre = nombre.text,
                                precio = precio.text,
                                descripcion = descripcion.text
                            )
                            onGuardarClick(servicioNuevo)
                        },
                        colors = ButtonDefaults.buttonColors(containerColor = baqueButtonColor),
                        modifier = Modifier.padding(end = 8.dp)
                    ) {
                        Text("Registrar")
                    }
                }
                "Modificar" -> {
                    Button(
                        onClick = {
                            if (servicioEncontrado != null) {
                                val servicioModificado = Servicio(
                                    codigo = codigo.text,
                                    nombre = nombre.text,
                                    precio = precio.text,
                                    descripcion = descripcion.text
                                )
                                onGuardarClick(servicioModificado)
                            }
                        },
                        colors = ButtonDefaults.buttonColors(
                            containerColor = baqueButtonColor,
                            contentColor = Color.White
                        ),
                        modifier = Modifier.padding(end = 8.dp),
                        enabled = servicioEncontrado != null
                    ) {
                        Text("Grabar")
                    }
                }
                "Eliminar" -> {
                    Button(
                        onClick = {
                            if (servicioEncontrado != null) {
                                onEliminarClick(servicioEncontrado!!)
                            }
                        },
                        colors = ButtonDefaults.buttonColors(
                            containerColor = baqueButtonColor,
                            contentColor = Color.White
                        ),
                        modifier = Modifier.padding(end = 8.dp),
                        enabled = servicioEncontrado != null
                    ) {
                        Text("Eliminar", color = Color.White)
                    }
                }
            }

            Button(
                onClick = onBackClick,
                colors = ButtonDefaults.buttonColors(containerColor = baqueButtonColor),
                modifier = Modifier.padding(start = 8.dp)
            ) {
                Text("Volver")
            }
        }
    }
}

// Lista de Servicios
@Composable
fun ListaServiciosScreen(
    servicios: List<Servicio> = emptyList(),
    onEditarClick: (Servicio) -> Unit = {},
    onEliminarClick: (Servicio) -> Unit = {},
    onBackClick: () -> Unit
) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        Text(
            text = "LISTA DE SERVICIOS",
            fontSize = 20.sp,
            fontWeight = FontWeight.Bold,
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 16.dp),
            textAlign = TextAlign.Center
        )

        // Lista de servicios con acciones
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .weight(1f)
                .border(BorderStroke(1.dp, Color.LightGray), shape = RoundedCornerShape(8.dp))
                .padding(16.dp)
        ) {
            // Encabezados
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .background(baquePink.copy(alpha = 0.2f))
                    .padding(8.dp)
            ) {
                Text(
                    text = "Código",
                    fontWeight = FontWeight.Bold,
                    fontSize = 14.sp,
                    modifier = Modifier.weight(0.15f)
                )
                Text(
                    text = "Nombre",
                    fontWeight = FontWeight.Bold,
                    fontSize = 14.sp,
                    modifier = Modifier.weight(0.25f)
                )
                Text(
                    text = "Precio",
                    fontWeight = FontWeight.Bold,
                    fontSize = 14.sp,
                    modifier = Modifier.weight(0.15f)
                )
                Text(
                    text = "Descripción",
                    fontWeight = FontWeight.Bold,
                    fontSize = 14.sp,
                    modifier = Modifier.weight(0.25f)
                )
                Text(
                    text = "Acciones",
                    fontWeight = FontWeight.Bold,
                    fontSize = 14.sp,
                    modifier = Modifier.weight(0.2f),
                    textAlign = TextAlign.Center
                )
            }

            if (servicios.isEmpty()) {
                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(vertical = 32.dp),
                    contentAlignment = Alignment.Center
                ) {
                    Text(
                        text = "No hay servicios registrados",
                        fontSize = 16.sp,
                        color = Color.Gray
                    )
                }
            } else {
                // Listado de servicios con botones de acción
                LazyColumn {
                    items(servicios) { servicio ->
                        Row(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(vertical = 8.dp, horizontal = 8.dp),
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Text(
                                text = servicio.codigo,
                                fontSize = 14.sp,
                                modifier = Modifier.weight(0.15f)
                            )
                            Text(
                                text = servicio.nombre,
                                fontSize = 14.sp,
                                modifier = Modifier.weight(0.25f)
                            )
                            Text(
                                text = "$ ${servicio.precio}",
                                fontSize = 14.sp,
                                modifier = Modifier.weight(0.15f)
                            )
                            Text(
                                text = servicio.descripcion ?: "",
                                fontSize = 14.sp,
                                modifier = Modifier.weight(0.25f),
                                maxLines = 2,
                                overflow = TextOverflow.Ellipsis
                            )
                            Row(
                                modifier = Modifier.weight(0.2f),
                                horizontalArrangement = Arrangement.Center
                            ) {
                                Button(
                                    onClick = { onEditarClick(servicio) },
                                    colors = ButtonDefaults.buttonColors(containerColor = baqueButtonColor),
                                    modifier = Modifier
                                        .padding(end = 4.dp)
                                        .size(width = 32.dp, height = 28.dp)
                                ) {
                                    Icon(
                                        Icons.Default.Edit,
                                        contentDescription = "Editar",
                                        tint = Color.White,
                                        modifier = Modifier.size(16.dp)
                                    )
                                }
                                Button(
                                    onClick = { onEliminarClick(servicio) },
                                    colors = ButtonDefaults.buttonColors(
                                        containerColor = Color.Red,
                                        contentColor = Color.White
                                    ),
                                    modifier = Modifier.size(width = 32.dp, height = 28.dp)
                                ) {
                                    Icon(
                                        Icons.Default.Delete,
                                        contentDescription = "Eliminar",
                                        tint = Color.White,
                                        modifier = Modifier.size(16.dp)
                                    )
                                }
                            }
                        }
                        Spacer(
                            modifier = Modifier
                                .fillMaxWidth()
                                .height(1.dp)
                                .background(Color.LightGray)
                        )
                    }
                }
            }
        }

        // Botón para volver
        Button(
            onClick = onBackClick,
            colors = ButtonDefaults.buttonColors(containerColor = baqueButtonColor),
            modifier = Modifier
                .align(Alignment.CenterHorizontally)
                .padding(top = 16.dp)
        ) {
            Text("Volver")
        }
    }
}

// Previews para pantallas
@OptIn(ExperimentalMaterial3Api::class)
@Composable
@Preview(showBackground = true, showSystemUi = true)
fun GestionarServiciosScreenPreview() {
    TM7_Spa_MEBTTheme {
        Scaffold(
            topBar = {
                TopAppBar(
                    title = {
                        Text(
                            text = "BAQUE SPA",
                            color = Color.White,
                            fontSize = 24.sp,
                            fontWeight = FontWeight.Bold,
                            textAlign = TextAlign.Center,
                            modifier = Modifier.fillMaxWidth()
                        )
                    },
                    colors = TopAppBarDefaults.topAppBarColors(
                        containerColor = baquePink
                    )
                )
            },
            containerColor = baqueBackground,
            bottomBar = {
                BottomAppBar(
                    containerColor = baquePink,
                    actions = {
                        IconButton(onClick = { }) {
                            Icon(
                                imageVector = Icons.Filled.Home,
                                contentDescription = "Home",
                                tint = Color.White
                            )
                        }
                        IconButton(onClick = { }) {
                            Icon(
                                imageVector = Icons.Filled.Person,
                                contentDescription = "Registro Clientes",
                                tint = Color.White
                            )
                        }
                    },
                    floatingActionButton = {
                        FloatingActionButton(
                            onClick = { },
                            containerColor = Color.White,
                            contentColor = baquePink,
                            shape = CircleShape
                        ) {
                            Icon(
                                imageVector = Icons.Filled.Add,
                                contentDescription = "Menu Principal"
                            )
                        }
                    }
                )
            }
        ) { innerPadding ->
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(innerPadding)
            ) {
                GestionarServiciosScreen(
                    onRegistrarClick = {},
                    onModificarClick = {},
                    onConsultarClick = {},
                    onEliminarClick = {},
                    onListaServiciosClick = {},
                    onBackClick = {}
                )

                Box(
                    modifier = Modifier
                        .align(Alignment.BottomStart)
                        .padding(8.dp)
                ) {
                    Text("GestionarServicios", fontSize = 12.sp)
                }
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
@Preview(showBackground = true, showSystemUi = true)
fun MantenimientoServiciosScreenPreview() {
    TM7_Spa_MEBTTheme {
        Scaffold(
            topBar = {
                TopAppBar(
                    title = {
                        Text(
                            text = "BAQUE SPA",
                            color = Color.White,
                            fontSize = 24.sp,
                            fontWeight = FontWeight.Bold,
                            textAlign = TextAlign.Center,
                            modifier = Modifier.fillMaxWidth()
                        )
                    },
                    colors = TopAppBarDefaults.topAppBarColors(
                        containerColor = baquePink
                    )
                )
            },
            containerColor = baqueBackground,
            bottomBar = {
                BottomAppBar(
                    containerColor = baquePink,
                    actions = {
                        IconButton(onClick = { }) {
                            Icon(
                                imageVector = Icons.Filled.Home,
                                contentDescription = "Home",
                                tint = Color.White
                            )
                        }
                        IconButton(onClick = { }) {
                            Icon(
                                imageVector = Icons.Filled.Person,
                                contentDescription = "Registro Clientes",
                                tint = Color.White
                            )
                        }
                    },
                    floatingActionButton = {
                        FloatingActionButton(
                            onClick = { },
                            containerColor = Color.White,
                            contentColor = baquePink,
                            shape = CircleShape
                        ) {
                            Icon(
                                imageVector = Icons.Filled.Add,
                                contentDescription = "Menu Principal"
                            )
                        }
                    }
                )
            }
        ) { innerPadding ->
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(innerPadding)
            ) {
                MantenimientoServiciosScreen(
                    tipoOperacion = "Registrar",
                    onBackClick = {}
                )

                Box(
                    modifier = Modifier
                        .align(Alignment.BottomStart)
                        .padding(8.dp)
                ) {
                    Text("MantenimientoServicios", fontSize = 12.sp)
                }
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
@Preview(showBackground = true, showSystemUi = true)
fun ListaServiciosScreenPreview() {
    TM7_Spa_MEBTTheme {
        Scaffold(
            topBar = {
                TopAppBar(
                    title = {
                        Text(
                            text = "BAQUE SPA",
                            color = Color.White,
                            fontSize = 24.sp,
                            fontWeight = FontWeight.Bold,
                            textAlign = TextAlign.Center,
                            modifier = Modifier.fillMaxWidth()
                        )
                    },
                    colors = TopAppBarDefaults.topAppBarColors(
                        containerColor = baquePink
                    )
                )
            },
            containerColor = baqueBackground,
            bottomBar = {
                BottomAppBar(
                    containerColor = baquePink,
                    actions = {
                        IconButton(onClick = { }) {
                            Icon(
                                imageVector = Icons.Filled.Home,
                                contentDescription = "Home",
                                tint = Color.White
                            )
                        }
                        IconButton(onClick = { }) {
                            Icon(
                                imageVector = Icons.Filled.Person,
                                contentDescription = "Registro Clientes",
                                tint = Color.White
                            )
                        }
                    },
                    floatingActionButton = {
                        FloatingActionButton(
                            onClick = { },
                            containerColor = Color.White,
                            contentColor = baquePink,
                            shape = CircleShape
                        ) {
                            Icon(
                                imageVector = Icons.Filled.Add,
                                contentDescription = "Menu Principal"
                            )
                        }
                    }
                )
            }
        ) { innerPadding ->
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(innerPadding)
            ) {
                ListaServiciosScreen(
                    onBackClick = {}
                )

                Box(
                    modifier = Modifier
                        .align(Alignment.BottomStart)
                        .padding(8.dp)
                ) {
                    Text("ListaServicios", fontSize = 12.sp)
                }
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
@Preview(showBackground = true, showSystemUi = true)
fun RegistroClientesScreenPreview() {
    TM7_Spa_MEBTTheme {
        Scaffold(
            topBar = {
                TopAppBar(
                    title = {
                        Text(
                            text = "BAQUE SPA",
                            color = Color.White,
                            fontSize = 24.sp,
                            fontWeight = FontWeight.Bold,
                            textAlign = TextAlign.Center,
                            modifier = Modifier.fillMaxWidth()
                        )
                    },
                    colors = TopAppBarDefaults.topAppBarColors(
                        containerColor = baquePink
                    )
                )
            },
            containerColor = baqueBackground,
            bottomBar = {
                BottomAppBar(
                    containerColor = baquePink,
                    actions = {
                        IconButton(onClick = { }) {
                            Icon(
                                imageVector = Icons.Filled.Home,
                                contentDescription = "Home",
                                tint = Color.White
                            )
                        }
                        IconButton(onClick = { }) {
                            Icon(
                                imageVector = Icons.Filled.Person,
                                contentDescription = "Registro Clientes",
                                tint = Color.White
                            )
                        }
                    },
                    floatingActionButton = {
                        FloatingActionButton(
                            onClick = { },
                            containerColor = Color.White,
                            contentColor = baquePink,
                            shape = CircleShape
                        ) {
                            Icon(
                                imageVector = Icons.Filled.Add,
                                contentDescription = "Menu Principal"
                            )
                        }
                    }
                )
            }
        ) { innerPadding ->
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(innerPadding)
            ) {
                RegistroClientesScreen(onBackClick = {})

                Box(
                    modifier = Modifier
                        .align(Alignment.BottomStart)
                        .padding(8.dp)
                ) {
                    Text("registro_clientes", fontSize = 12.sp)
                }
            }
        }
    }
}
@OptIn(ExperimentalMaterial3Api::class)
@Composable
@Preview(showBackground = true, showSystemUi = true)
fun MainScreenPreview() {
    TM7_Spa_MEBTTheme {
        Scaffold(
            topBar = {
                TopAppBar(
                    title = {
                        Text(
                            text = "BAQUE SPA",
                            color = Color.White,
                            fontSize = 24.sp,
                            fontWeight = FontWeight.Bold,
                            textAlign = TextAlign.Center,
                            modifier = Modifier.fillMaxWidth()
                        )
                    },
                    colors = TopAppBarDefaults.topAppBarColors(
                        containerColor = baquePink
                    )
                )
            },
            containerColor = baqueBackground,
            bottomBar = {
                BottomAppBar(
                    containerColor = baquePink,
                    actions = {
                        IconButton(onClick = { }) {
                            Icon(
                                imageVector = Icons.Filled.Home,
                                contentDescription = "Home",
                                tint = Color.White
                            )
                        }
                        IconButton(onClick = { }) {
                            Icon(
                                imageVector = Icons.Filled.Person,
                                contentDescription = "Registro Clientes",
                                tint = Color.White
                            )
                        }
                    },
                    floatingActionButton = {
                        FloatingActionButton(
                            onClick = { },
                            containerColor = Color.White,
                            contentColor = baquePink,
                            shape = CircleShape
                        ) {
                            Icon(
                                imageVector = Icons.Filled.Add,
                                contentDescription = "Menu Principal"
                            )
                        }
                    }
                )
            }
        ) { innerPadding ->
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(innerPadding)
            ) {
                MainScreen(onEmpresaClick = {}, onServiciosClick = {})

                Box(
                    modifier = Modifier
                        .align(Alignment.BottomStart)
                        .padding(8.dp)
                ) {
                    Text("MainActivity", fontSize = 12.sp)
                }
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
@Preview(showBackground = true, showSystemUi = true)
fun EmpresaScreenPreview() {
    TM7_Spa_MEBTTheme {
        Scaffold(
            topBar = {
                TopAppBar(
                    title = {
                        Text(
                            text = "BAQUE SPA",
                            color = Color.White,
                            fontSize = 24.sp,
                            fontWeight = FontWeight.Bold,
                            textAlign = TextAlign.Center,
                            modifier = Modifier.fillMaxWidth()
                        )
                    },
                    colors = TopAppBarDefaults.topAppBarColors(
                        containerColor = baquePink
                    )
                )
            },
            containerColor = baqueBackground,
            bottomBar = {
                BottomAppBar(
                    containerColor = baquePink,
                    actions = {
                        IconButton(onClick = { }) {
                            Icon(
                                imageVector = Icons.Filled.Home,
                                contentDescription = "Home",
                                tint = Color.White
                            )
                        }
                        IconButton(onClick = { }) {
                            Icon(
                                imageVector = Icons.Filled.Person,
                                contentDescription = "Registro Clientes",
                                tint = Color.White
                            )
                        }
                    },
                    floatingActionButton = {
                        FloatingActionButton(
                            onClick = { },
                            containerColor = Color.White,
                            contentColor = baquePink,
                            shape = CircleShape
                        ) {
                            Icon(
                                imageVector = Icons.Filled.Add,
                                contentDescription = "Menu Principal"
                            )
                        }
                    }
                )
            }
        ) { innerPadding ->
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(innerPadding)
            ) {
                EmpresaScreen(onBackClick = {}, onContactenosClick = {}, onQuienesSomosClick = {})

                Box(
                    modifier = Modifier
                        .align(Alignment.BottomStart)
                        .padding(8.dp)
                ) {
                    Text("frmEmpresa", fontSize = 12.sp)
                }
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
@Preview(showBackground = true, showSystemUi = true)
fun ServiciosScreenPreview() {
    TM7_Spa_MEBTTheme {
        Scaffold(
            topBar = {
                TopAppBar(
                    title = {
                        Text(
                            text = "BAQUE SPA",
                            color = Color.White,
                            fontSize = 24.sp,
                            fontWeight = FontWeight.Bold,
                            textAlign = TextAlign.Center,
                            modifier = Modifier.fillMaxWidth()
                        )
                    },
                    colors = TopAppBarDefaults.topAppBarColors(
                        containerColor = baquePink
                    )
                )
            },
            containerColor = baqueBackground,
            bottomBar = {
                BottomAppBar(
                    containerColor = baquePink,
                    actions = {
                        IconButton(onClick = { }) {
                            Icon(
                                imageVector = Icons.Filled.Home,
                                contentDescription = "Home",
                                tint = Color.White
                            )
                        }
                        IconButton(onClick = { }) {
                            Icon(
                                imageVector = Icons.Filled.Person,
                                contentDescription = "Registro Clientes",
                                tint = Color.White
                            )
                        }
                    },
                    floatingActionButton = {
                        FloatingActionButton(
                            onClick = { },
                            containerColor = Color.White,
                            contentColor = baquePink,
                            shape = CircleShape
                        ) {
                            Icon(
                                imageVector = Icons.Filled.Add,
                                contentDescription = "Menu Principal"
                            )
                        }
                    }
                )
            }
        ) { innerPadding ->
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(innerPadding)
            ) {
                ServiciosScreen(onBackClick = {})

                Box(
                    modifier = Modifier
                        .align(Alignment.BottomStart)
                        .padding(8.dp)
                ) {
                    Text("Presentacion_servicios", fontSize = 12.sp)
                }
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
@Preview(showBackground = true, showSystemUi = true)
fun ContactenosScreenPreview() {
    TM7_Spa_MEBTTheme {
        Scaffold(
            topBar = {
                TopAppBar(
                    title = {
                        Text(
                            text = "BAQUE SPA",
                            color = Color.White,
                            fontSize = 24.sp,
                            fontWeight = FontWeight.Bold,
                            textAlign = TextAlign.Center,
                            modifier = Modifier.fillMaxWidth()
                        )
                    },
                    colors = TopAppBarDefaults.topAppBarColors(
                        containerColor = baquePink
                    )
                )
            },
            containerColor = baqueBackground,
            bottomBar = {
                BottomAppBar(
                    containerColor = baquePink,
                    actions = {
                        IconButton(onClick = { }) {
                            Icon(
                                imageVector = Icons.Filled.Home,
                                contentDescription = "Home",
                                tint = Color.White
                            )
                        }
                        IconButton(onClick = { }) {
                            Icon(
                                imageVector = Icons.Filled.Person,
                                contentDescription = "Registro Clientes",
                                tint = Color.White
                            )
                        }
                    },
                    floatingActionButton = {
                        FloatingActionButton(
                            onClick = { },
                            containerColor = Color.White,
                            contentColor = baquePink,
                            shape = CircleShape
                        ) {
                            Icon(
                                imageVector = Icons.Filled.Add,
                                contentDescription = "Menu Principal"
                            )
                        }
                    }
                )
            }
        ) { innerPadding ->
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(innerPadding)
            ) {
                ContactenosScreen(onBackClick = {})

                Box(
                    modifier = Modifier
                        .align(Alignment.BottomStart)
                        .padding(8.dp)
                ) {
                    Text("fragmento_contactenos", fontSize = 12.sp)
                }
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
@Preview(showBackground = true, showSystemUi = true)
fun QuienesSomosScreenPreview() {
    TM7_Spa_MEBTTheme {
        Scaffold(
            topBar = {
                TopAppBar(
                    title = {
                        Text(
                            text = "BAQUE SPA",
                            color = Color.White,
                            fontSize = 24.sp,
                            fontWeight = FontWeight.Bold,
                            textAlign = TextAlign.Center,
                            modifier = Modifier.fillMaxWidth()
                        )
                    },
                    colors = TopAppBarDefaults.topAppBarColors(
                        containerColor = baquePink
                    )
                )
            },
            containerColor = baqueBackground,
            bottomBar = {
                BottomAppBar(
                    containerColor = baquePink,
                    actions = {
                        IconButton(onClick = { }) {
                            Icon(
                                imageVector = Icons.Filled.Home,
                                contentDescription = "Home",
                                tint = Color.White
                            )
                        }
                        IconButton(onClick = { }) {
                            Icon(
                                imageVector = Icons.Filled.Person,
                                contentDescription = "Registro Clientes",
                                tint = Color.White
                            )
                        }
                    },
                    floatingActionButton = {
                        FloatingActionButton(
                            onClick = { },
                            containerColor = Color.White,
                            contentColor = baquePink,
                            shape = CircleShape
                        ) {
                            Icon(
                                imageVector = Icons.Filled.Add,
                                contentDescription = "Menu Principal"
                            )
                        }
                    }
                )
            }
        ) { innerPadding ->
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(innerPadding)
            ) {
                QuienesSomosScreen(onBackClick = {})

                Box(
                    modifier = Modifier
                        .align(Alignment.BottomStart)
                        .padding(8.dp)
                ) {
                    Text("fragmento_quienes_somos", fontSize = 12.sp)
                }
            }
        }
    }
}